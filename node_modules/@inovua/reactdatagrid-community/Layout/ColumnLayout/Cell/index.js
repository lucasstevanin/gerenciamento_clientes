/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _region = _interopRequireDefault(require("../../../packages/region"));

var _shallowequal = _interopRequireWildcard(require("../../../packages/shallowequal"));

var _autoBind = _interopRequireDefault(require("../../../packages/react-class/autoBind"));

var _renderHeader = _interopRequireDefault(require("./renderHeader"));

var _renderGroupTool2 = _interopRequireDefault(require("./renderGroupTool"));

var _renderNodeTool2 = _interopRequireDefault(require("./renderNodeTool"));

var _sealedObjectFactory = _interopRequireDefault(require("../../../utils/sealedObjectFactory"));

var _join = _interopRequireDefault(require("../../../packages/join"));

var _isFocusable = _interopRequireDefault(require("../../../utils/isFocusable"));

var _bemFactory = _interopRequireDefault(require("../../../bemFactory"));

var _renderSortTool = _interopRequireDefault(require("./renderSortTool"));

var _defaultRowReorderColumnId = require("../../../normalizeColumns/defaultRowReorderColumnId");

var _Text = _interopRequireDefault(require("./editors/Text"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var cellBem = (0, _bemFactory.default)('InovuaReactDataGrid__cell');
var headerBem = (0, _bemFactory.default)('InovuaReactDataGrid__column-header');
var emptyObject = Object.freeze ? Object.freeze({}) : {};

var emptyFn = function emptyFn() {};

var CELL_RENDER_OBJECT = (0, _sealedObjectFactory.default)({
  empty: null,
  value: null,
  data: null,
  columnIndex: null,
  rowIndex: null,
  remoteRowIndex: null,
  rowIndexInGroup: null,
  nodeProps: null,
  rowSelected: null,
  rowExpanded: null,
  treeColumn: null,
  setRowSelected: null,
  setRowExpanded: null,
  isRowExpandable: null,
  toggleRowExpand: null,
  toggleNodeExpand: null,
  loadNodeAsync: null,
  toggleGroup: null,
  cellProps: null,
  totalDataCount: null,
  rendersInlineEditor: null,
  renderRowDetailsExpandIcon: null,
  renderRowDetailsCollapsedIcon: null,
  renderRowDetailsMoreIcon: null
});
var CELL_RENDER_SECOND_OBJ = (0, _sealedObjectFactory.default)({
  cellProps: null,
  column: null,
  headerProps: null
});

var wrapInContent = function wrapInContent(value) {
  return _react.default.createElement("div", {
    key: "content",
    className: "InovuaReactDataGrid__cell__content",
    children: value
  });
};

var InovuaDataGridCell = function (_React$Component) {
  (0, _inherits2.default)(InovuaDataGridCell, _React$Component);

  var _super = _createSuper(InovuaDataGridCell);

  function InovuaDataGridCell(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, InovuaDataGridCell);
    _this = _super.call(this, _props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isCancelled", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onColumnHoverMouseEnter", function (props) {
      if (props.groupProps || props.groupSpacerColumn || props.isRowDetailsCell || props.isCheckboxColumn) {
        return;
      }

      if (props.onColumnMouseEnter) {
        props.onColumnMouseEnter(props);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onColumnHoverMouseLeave", function (props) {
      if (props.groupProps || props.groupSpacerColumn || props.isRowDetailsCell || props.isCheckboxColumn) {
        return;
      }

      if (props.onColumnMouseLeave) {
        props.onColumnMouseLeave(props);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleGroup", function (event) {
      if (event && event.preventDefault) {
        event.preventDefault();
      }

      var props = _this.getProps();

      if (typeof props.onGroupToggle === 'function') {
        var data = props.data;
        props.onGroupToggle(data.keyPath, props, event);
      }
    });
    _this.domRef = _react.default.createRef();
    _this.state = {
      props: _props
    };
    (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));

    if (_props.headerCell) {
      _this.state.left = _props.left || 0;
    }

    _this.isCancelled = false;
    return _this;
  }

  (0, _createClass2.default)(InovuaDataGridCell, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.updateProps(nextProps);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.node = this.getDOMNode();

      if (this.props.onMount) {
        this.props.onMount(this.props, this);
      }
    }
  }, {
    key: "getProps",
    value: function getProps() {
      return this.state.props;
    }
  }, {
    key: "setStateProps",
    value: function setStateProps(stateProps) {
      if (this.unmounted) {
        return;
      }

      var newProps = Object.assign({}, InovuaDataGridCell.defaultProps, stateProps);

      if (!(0, _shallowequal.default)(newProps, this.getProps())) {
        this.updateProps(newProps);
      }
    }
  }, {
    key: "updateProps",
    value: function updateProps(props, callback) {
      var newState = {
        props: props
      };
      this.updateState(newState, callback);
    }
  }, {
    key: "onUpdate",
    value: function onUpdate() {
      if (this.props.onUpdate) {
        this.props.onUpdate(this.getProps(), this);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.cleanupResizeObserver) {
        this.cleanupResizeObserver();
      }

      if (this.props.onUnmount) {
        this.props.onUnmount(this.props, this);
      }

      this.unmounted = true;
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var areEqual = (0, _shallowequal.equalReturnKey)(nextProps, this.props, {
        computedActiveIndex: 1,
        activeRowRef: 1,
        active: 1,
        remoteRowIndex: 1,
        onResizeMouseDown: 1,
        onResizeTouchStart: 1,
        onFocus: 1,
        onSortClick: 1,
        onTouchStart: 1,
        onColumnMouseEnter: 1,
        onColumnMouseLeave: 1
      });
      var equalProps = areEqual.result;

      if (!areEqual.result) {
        return true;
      }

      if (equalProps && !this.updating) {
        return false;
      }

      var equal = this.state ? equalProps && (0, _shallowequal.default)(nextState, this.state) : equalProps;
      return !equal;
    }
  }, {
    key: "prepareStyle",
    value: function prepareStyle(props) {
      var maxWidth = props.maxWidth,
          minRowHeight = props.minRowHeight,
          computedLocked = props.computedLocked,
          virtualizeColumns = props.virtualizeColumns,
          computedWidth = props.computedWidth,
          computedOffset = props.computedOffset,
          rowHeight = props.rowHeight,
          initialRowHeight = props.initialRowHeight,
          naturalRowHeight = props.naturalRowHeight,
          headerCell = props.headerCell,
          hidden = props.hidden,
          rtl = props.rtl,
          inTransition = props.inTransition,
          inShowTransition = props.inShowTransition,
          computedRowspan = props.computedRowspan,
          zIndex = props.zIndex;
      var style = {};

      if (typeof props.style === 'function') {
        if (!headerCell) {
          Object.assign(style, props.style(props));
        }
      } else {
        Object.assign(style, props.style);
      }

      style.width = computedWidth;
      style.minWidth = computedWidth;

      if (minRowHeight) {
        style.minHeight = minRowHeight;
      }

      if (headerCell) {
        style.maxWidth = computedWidth;
      }

      if (maxWidth) {
        style.maxWidth = maxWidth;
      }

      if (!headerCell) {
        if (rowHeight && !naturalRowHeight) {
          style.height = rowHeight;
        }

        if (naturalRowHeight) {
          style.minHeight = minRowHeight;
        } else {
          if (initialRowHeight) {
            style.height = initialRowHeight;
          }

          if (rowHeight && computedRowspan > 1) {
            style.height = (initialRowHeight || rowHeight) * computedRowspan;
          }
        }
      }

      if (hidden) {
        style.display = 'none';
      }

      if (!headerCell && !computedLocked) {
        style.position = naturalRowHeight ? 'relative' : 'absolute';
        style.top = 0;

        if (!naturalRowHeight) {
          if (rtl) {
            style.right = computedOffset;
          } else {
            style.left = computedOffset;
          }
        }
      }

      if (this.state && this.state.dragging) {
        if (rtl) {
          style.right = this.state.right || 0;
        } else {
          style.left = this.state.left || 0;
        }

        style.top = this.state.top || 0;
        style.height = this.state.height || '';

        if (!props.computedResizable && props.computedFilterable) {
          if (rtl) {
            style.right = 0;
          } else {
            style.left = 0;
          }

          style.top = 0;
        }

        style.position = 'absolute';
        style.zIndex = 100;
      }

      if (zIndex) {
        style.zIndex = zIndex;
      }

      if (computedWidth === 0) {
        style.paddingLeft = 0;
        style.paddingRight = 0;
      }

      if (inTransition) {
        var duration = inShowTransition ? props.showTransitionDuration : props.hideTransitionDuration;
        duration = duration || props.visibilityTransitionDuration;
        style.transitionDuration = typeof duration == 'number' ? "".concat(duration, "ms") : duration;
      }

      return style;
    }
  }, {
    key: "prepareClassName",
    value: function prepareClassName(props) {
      var isGroupCell = props.groupCell,
          groupTitleCell = props.groupTitleCell,
          groupExpandCell = props.groupExpandCell,
          isHeaderCell = props.headerCell,
          headerCellDefaultClassName = props.headerCellDefaultClassName,
          cellDefaultClassName = props.cellDefaultClassName,
          computedGroupBy = props.computedGroupBy,
          depth = props.depth,
          computedVisibleIndex = props.computedVisibleIndex,
          headerCell = props.headerCell,
          headerEllipsis = props.headerEllipsis,
          groupProps = props.groupProps,
          hidden = props.hidden,
          showBorderRight = props.showBorderRight,
          showBorderTop = props.showBorderTop,
          showBorderBottom = props.showBorderBottom,
          showBorderLeft = props.showBorderLeft,
          firstInSection = props.firstInSection,
          lastInSection = props.lastInSection,
          noBackground = props.noBackground,
          computedLocked = props.computedLocked,
          computedWidth = props.computedWidth,
          inTransition = props.inTransition,
          rowSelected = props.rowSelected,
          computedRowspan = props.computedRowspan,
          cellSelected = props.cellSelected,
          cellActive = props.cellActive,
          groupSpacerColumn = props.groupSpacerColumn,
          computedPivot = props.computedPivot,
          computedResizable = props.computedResizable,
          groupColumnVisible = props.groupColumnVisible,
          computedFilterable = props.computedFilterable,
          rtl = props.rtl,
          inEdit = props.inEdit,
          columnIndex = props.columnIndex,
          columnIndexHovered = props.columnIndexHovered,
          columnHoverClassName = props.columnHoverClassName;
      var userSelect = props.userSelect,
          headerUserSelect = props.headerUserSelect;

      if (typeof userSelect === 'boolean') {
        userSelect = userSelect ? 'text' : 'none';
      }

      if (typeof headerUserSelect === 'boolean') {
        headerUserSelect = headerUserSelect ? 'text' : 'none';
      }

      var nested = depth != null && computedVisibleIndex == 0 && !headerCell && !groupColumnVisible;
      var baseClassName = isHeaderCell ? headerCellDefaultClassName : cellDefaultClassName;
      var commonClassName = (0, _join.default)(!computedLocked && "".concat(baseClassName, "--unlocked"), computedLocked && "".concat(baseClassName, "--locked"), computedLocked && "".concat(baseClassName, "--locked-").concat(computedLocked));
      var last = props.last || props.computedVisibleIndex == props.computedVisibleCount - 1;
      var propsClassName = typeof props.className === 'function' ? props.className(props) : props.className;
      var className = (0, _join.default)(propsClassName, baseClassName, commonClassName, !isHeaderCell && props.cellClassName, (nested || hidden) && "".concat(baseClassName, "--no-padding"), hidden && "".concat(baseClassName, "--hidden"), "".concat(baseClassName, "--direction-").concat(rtl ? 'rtl' : 'ltr'), computedRowspan > 1 && "".concat(baseClassName, "--rowspan"), inTransition && "".concat(baseClassName, "--transition"), inTransition && computedWidth && "".concat(baseClassName, "--showing"), inTransition && !computedWidth && "".concat(baseClassName, "--hiding"), computedWidth === 0 && "".concat(baseClassName, "--no-size"), nested && "".concat(baseClassName, "--stretch"), isHeaderCell && headerUserSelect == null || !isHeaderCell ? userSelect && "".concat(baseClassName, "--user-select-").concat(userSelect) : null, groupExpandCell && "".concat(baseClassName, "--group-expand-cell"), groupTitleCell && "".concat(baseClassName, "--group-title-cell"), rowSelected && "".concat(baseClassName, "--selected"), groupProps && "".concat(baseClassName, "--group-cell"), computedPivot && "".concat(baseClassName, "--pivot-enabled"), groupSpacerColumn && "".concat(baseClassName, "--group-column-cell"), inEdit && "".concat(baseClassName, "--in-edit"), cellSelected && "".concat(baseClassName, "--cell-selected"), cellActive && "".concat(baseClassName, "--cell-active"), props.textAlign && (isHeaderCell ? !props.headerAlign : true) && "".concat(baseClassName, "--align-").concat(props.textAlign), props.textVerticalAlign && (isHeaderCell ? !props.headerVerticalAlign : true) && "".concat(baseClassName, "--vertical-align-").concat(props.textVerticalAlign), props.virtualizeColumns && "".concat(baseClassName, "--virtualize-columns"), props.computedVisibleIndex === 0 && "".concat(baseClassName, "--first"), props.rowIndexInGroup === 0 && "".concat(baseClassName, "--first-row-in-group"), last && "".concat(baseClassName, "--last"), showBorderLeft && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? 'right' : 'left'), firstInSection && "".concat(baseClassName, "--first-in-section"), lastInSection && "".concat(baseClassName, "--last-in-section"), showBorderRight && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? 'left' : 'right'), showBorderTop && "".concat(baseClassName, "--show-border-top"), showBorderBottom && "".concat(baseClassName, "--show-border-bottom"), noBackground && "".concat(baseClassName, "--no-background"), columnIndex === columnIndexHovered ? columnHoverClassName ? (0, _join.default)("".concat(baseClassName, "--over"), columnHoverClassName) : "".concat(baseClassName, "--over") : '');

      if (cellSelected) {
        className = (0, _join.default)(className, props.hasTopSelectedSibling && "".concat(baseClassName, "--cell-has-top-selected-sibling"), props.hasBottomSelectedSibling && "".concat(baseClassName, "--cell-has-bottom-selected-sibling"), props.hasLeftSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? 'right' : 'left', "-selected-sibling"), props.hasRightSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? 'left' : 'right', "-selected-sibling"));
      }

      if (isHeaderCell) {
        className = (0, _join.default)(className, commonClassName, props.headerClassName, props.titleClassName, this.state && this.state.dragging && "".concat(baseClassName, "--dragging"), this.state && this.state.left && "".concat(baseClassName, "--reordered"), props.computedSortable && "".concat(baseClassName, "--sortable"), headerUserSelect && "".concat(baseClassName, "--user-select-").concat(headerUserSelect), last && !headerEllipsis && "".concat(baseClassName, "--overflow-hidden"), "".concat(baseClassName, "--align-").concat(props.headerAlign || 'start'), props.group ? "".concat(baseClassName, "--has-group") : "".concat(baseClassName, "--has-no-group"), props.headerVerticalAlign && "".concat(baseClassName, "--vertical-align-").concat(props.headerVerticalAlign), props.computedResizable ? "".concat(baseClassName, "--resizable") : "".concat(baseClassName, "--unresizable"), props.computedLockable ? "".concat(baseClassName, "--lockable") : "".concat(baseClassName, "--unlockable"), props.lastInGroup && "".concat(baseClassName, "--last-in-group"));
      } else {
        className = (0, _join.default)(className, (groupProps ? groupProps.depth == computedVisibleIndex : computedGroupBy ? computedGroupBy.length === computedVisibleIndex : computedVisibleIndex === 0) && "".concat(baseClassName, "--active-row-left-border"));
      }

      if (isGroupCell) {
        className = (0, _join.default)(className, 'InovuaReactDataGrid__group-cell');
      }

      return className;
    }
  }, {
    key: "setDragging",
    value: function setDragging(dragging, callback) {
      var newState = {
        dragging: dragging
      };

      if (!dragging) {
        newState.top = 0;

        if (this.props.rtl) {
          newState.right = 0;
        } else {
          newState.left = 0;
        }
      }

      this.updateState(newState, callback);
    }
  }, {
    key: "updateState",
    value: function updateState(state, callback) {
      var _this2 = this;

      this.updating = true;
      this.setState(state, function () {
        _this2.updating = false;

        if (callback && typeof callback === 'function') {
          callback();
        }
      });
    }
  }, {
    key: "setLeft",
    value: function setLeft(left) {
      this.updateState({
        left: left
      });
    }
  }, {
    key: "setRight",
    value: function setRight(right) {
      this.updateState({
        right: right
      });
    }
  }, {
    key: "setTop",
    value: function setTop(top) {
      this.updateState({
        top: top
      });
    }
  }, {
    key: "setHeight",
    value: function setHeight(height) {
      this.updateState({
        height: height
      });
    }
  }, {
    key: "setWidth",
    value: function setWidth(width) {
      this.updateState({
        width: width
      });
    }
  }, {
    key: "getInitialIndex",
    value: function getInitialIndex() {
      return this.props.computedVisibleIndex;
    }
  }, {
    key: "getcomputedVisibleIndex",
    value: function getcomputedVisibleIndex() {
      return this.getProps().computedVisibleIndex;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.getProps();
      var cellActive = props.cellActive,
          cellSelected = props.cellSelected,
          data = props.data,
          empty = props.empty,
          groupProps = props.groupProps,
          headerCell = props.headerCell,
          hidden = props.hidden,
          name = props.name,
          onCellEnter = props.onCellEnter,
          onRender = props.onRender,
          treeColumn = props.treeColumn,
          groupSpacerColumn = props.groupSpacerColumn,
          groupColumn = props.groupColumn,
          loadNodeAsync = props.loadNodeAsync,
          groupColumnVisible = props.groupColumnVisible,
          rowIndex = props.rowIndex,
          remoteRowIndex = props.remoteRowIndex,
          rowSelected = props.rowSelected,
          rowExpanded = props.rowExpanded,
          setRowSelected = props.setRowSelected,
          setRowExpanded = props.setRowExpanded,
          isRowExpandable = props.isRowExpandable,
          toggleRowExpand = props.toggleRowExpand,
          toggleNodeExpand = props.toggleNodeExpand,
          totalDataCount = props.totalDataCount,
          computedVisibleIndex = props.computedVisibleIndex,
          inEdit = props.inEdit,
          renderRowDetailsMoreIcon = props.renderRowDetailsMoreIcon,
          renderRowDetailsExpandIcon = props.renderRowDetailsExpandIcon,
          renderRowDetailsCollapsedIcon = props.renderRowDetailsCollapsedIcon;
      var value = props.value,
          renderCell = props.render,
          renderSummary = props.renderSummary;
      var className = this.prepareClassName(props);
      var style = this.prepareStyle(props);
      var headerProps = headerCell ? props.headerProps || emptyObject : null;

      if (!headerCell && groupSpacerColumn && groupProps && groupProps.depth == computedVisibleIndex) {
        value = this.renderGroupTool();
      }

      var children = value;
      var cellProps = Object.assign({}, props, headerCell ? headerProps : props.cellProps, {
        instance: this,
        value: value,
        name: name,
        columnIndex: computedVisibleIndex,
        children: children,
        onClick: this.onClick,
        onDoubleClick: this.onDoubleClick,
        onContextMenu: this.onContextMenu,
        onMouseDown: this.onMouseDown,
        onTouchStart: this.onTouchStart,
        onMouseEnter: this.onCellEnter,
        onMouseLeave: this.onCellLeave
      });
      cellProps.className = headerCell ? headerProps.className ? "".concat(className, " ").concat(headerProps.className) : className : props.cellProps && props.cellProps.className ? typeof props.cellProps.className === 'function' ? "".concat(className, " ").concat(props.cellProps.className(cellProps)) : "".concat(className, " ").concat(props.cellProps.className) : className;

      if (!headerCell) {
        CELL_RENDER_OBJECT.empty = empty;
        CELL_RENDER_OBJECT.value = value;
        CELL_RENDER_OBJECT.data = data;
        CELL_RENDER_OBJECT.cellProps = cellProps;
        CELL_RENDER_OBJECT.columnIndex = computedVisibleIndex;
        CELL_RENDER_OBJECT.treeColumn = treeColumn;
        CELL_RENDER_OBJECT.rowIndex = rowIndex;
        CELL_RENDER_OBJECT.remoteRowIndex = remoteRowIndex;
        CELL_RENDER_OBJECT.rowIndexInGroup = props.rowIndexInGroup;
        CELL_RENDER_OBJECT.rowSelected = rowSelected;
        CELL_RENDER_OBJECT.rowExpanded = rowExpanded;
        CELL_RENDER_OBJECT.nodeProps = data ? data.__nodeProps : emptyObject;
        CELL_RENDER_OBJECT.setRowSelected = setRowSelected;
        CELL_RENDER_OBJECT.setRowExpanded = setRowExpanded;
        CELL_RENDER_OBJECT.toggleGroup = this.toggleGroup;
        CELL_RENDER_OBJECT.toggleRowExpand = toggleRowExpand;
        CELL_RENDER_OBJECT.toggleNodeExpand = toggleNodeExpand;
        CELL_RENDER_OBJECT.loadNodeAsync = loadNodeAsync;
        CELL_RENDER_OBJECT.isRowExpandable = isRowExpandable;
        CELL_RENDER_OBJECT.totalDataCount = totalDataCount;
        CELL_RENDER_OBJECT.renderRowDetailsExpandIcon = renderRowDetailsExpandIcon;
        CELL_RENDER_OBJECT.renderRowDetailsCollapsedIcon = renderRowDetailsCollapsedIcon;
      }

      var rendersInlineEditor = headerCell ? false : cellProps.rendersInlineEditor;

      if (rendersInlineEditor && typeof rendersInlineEditor === 'function') {
        rendersInlineEditor = cellProps.rendersInlineEditor(CELL_RENDER_OBJECT);
      }

      CELL_RENDER_OBJECT.rendersInlineEditor = rendersInlineEditor;
      cellProps.style = headerCell ? headerProps.style ? Object.assign({}, style, headerProps.style) : style : props.cellProps && props.cellProps.style ? typeof props.cellProps.style === 'function' ? Object.assign({}, style, props.cellProps.style(cellProps)) : Object.assign({}, style, props.cellProps.style) : style;

      if (inEdit || rendersInlineEditor) {
        cellProps.editProps = {
          inEdit: inEdit,
          startEdit: this.startEdit,
          value: props.editValue,
          onClick: this.onEditorClick,
          onChange: this.onEditValueChange,
          onComplete: this.onEditorComplete,
          onCancel: this.onEditorCancel,
          onEnterNavigation: this.onEditorEnterNavigation,
          onTabNavigation: this.onEditorTabNavigation,
          gotoNext: this.gotoNextEditor,
          gotoPrev: this.gotoPrevEditor
        };
      }

      if (headerCell) {
        cellProps.onFocus = this.onHeaderCellFocus;
      }

      if (headerCell) {
        CELL_RENDER_OBJECT.renderRowDetailsMoreIcon = renderRowDetailsMoreIcon;
      }

      if (headerCell) {
        cellProps = this.prepareHeaderCellProps(cellProps);
      } else {
        if (data && (data.__summary || data.__group && data.groupColumnSummary) && renderSummary) {
          renderCell = renderSummary;
        }

        if (renderCell) {
          CELL_RENDER_SECOND_OBJ.cellProps = cellProps;
          CELL_RENDER_SECOND_OBJ.column = cellProps;
          CELL_RENDER_SECOND_OBJ.headerProps = null;

          if (data && (!data.__group || groupColumnVisible)) {
            cellProps.children = renderCell(CELL_RENDER_OBJECT, CELL_RENDER_SECOND_OBJ);
          }
        }

        if (!hidden && cellProps.children != null && cellProps.textEllipsis !== false) {
          cellProps.children = wrapInContent(cellProps.children);
        }

        if (onRender) {
          onRender(cellProps, CELL_RENDER_OBJECT);
        }

        if (cellSelected || cellActive || inEdit || rendersInlineEditor) {
          cellProps.children = [cellProps.children, this.renderSelectionBox(cellProps), inEdit && !rendersInlineEditor ? this.renderEditor(cellProps) : null];
        }

        if (treeColumn) {
          if (Array.isArray(cellProps.children)) {
            cellProps.children = [this.renderNodeTool(props)].concat((0, _toConsumableArray2.default)(cellProps.children));
          } else {
            cellProps.children = [this.renderNodeTool(props), cellProps.children];
          }
        }
      }

      var initialDOMProps = this.getInitialDOMProps();
      var domProps = Object.assign({}, initialDOMProps, {
        onFocus: cellProps.onFocus || initialDOMProps.onFocus,
        onClick: cellProps.onClick || initialDOMProps.onClick,
        onContextMenu: cellProps.onContextMenu || initialDOMProps.onContextMenu,
        onDoubleClick: cellProps.onDoubleClick || initialDOMProps.onDoubleClick,
        onMouseDown: cellProps.onMouseDown || initialDOMProps.onMouseDown,
        onTouchStart: cellProps.onTouchStart || initialDOMProps.onTouchStart,
        onMouseEnter: cellProps.onMouseEnter || initialDOMProps.onMouseEnter,
        onMouseLeave: cellProps.onMouseLeave || initialDOMProps.onMouseLeave,
        style: initialDOMProps.style ? Object.assign({}, initialDOMProps.style, cellProps.style) : cellProps.style,
        className: (0, _join.default)(initialDOMProps.className, cellProps.className)
      });
      domProps.ref = this.domRef;
      return headerCell ? (0, _renderHeader.default)(cellProps, domProps, this, this.state) : _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
        children: cellProps.children,
        id: null,
        name: null,
        value: null,
        title: null,
        data: null
      }));
    }
  }, {
    key: "renderNodeTool",
    value: function renderNodeTool(props) {
      var data = props.data,
          renderTreeCollapseTool = props.renderTreeCollapseTool,
          renderTreeExpandTool = props.renderTreeExpandTool,
          renderTreeLoadingTool = props.renderTreeLoadingTool;
      var nodeProps = data.__nodeProps || emptyObject;
      var leafNode = nodeProps.leafNode;
      var loading = nodeProps.loading;
      var expanded = nodeProps.expanded;
      var collapsed = !expanded;
      var style = (0, _defineProperty2.default)({}, this.props.rtl ? 'marginRight' : 'marginLeft', (nodeProps.depth || 0) * props.treeNestingSize);

      if (this.props.rtl && collapsed) {
        style.transform = 'rotate(180deg)';
      }

      var element = (0, _renderNodeTool2.default)({
        render: props.renderNodeTool,
        nodeExpanded: expanded,
        nodeCollapsed: collapsed,
        nodeLoading: loading,
        leafNode: leafNode,
        nodeProps: nodeProps,
        node: data,
        rtl: this.props.rtl,
        size: 20,
        style: style,
        toggleNodeExpand: props.toggleNodeExpand,
        renderTreeCollapseTool: renderTreeCollapseTool,
        renderTreeExpandTool: renderTreeExpandTool,
        renderTreeLoadingTool: renderTreeLoadingTool
      }, props);

      if (!element) {
        return;
      }

      return (0, _react.cloneElement)(element, {
        key: 'nodeTool'
      });
    }
  }, {
    key: "getInitialDOMProps",
    value: function getInitialDOMProps() {
      var props = this.getProps();
      var domProps = props.domProps;
      var specificDomProps = props.headerCell ? props.headerDOMProps : props.cellDOMProps;

      if (typeof domProps == 'function') {
        domProps = domProps(props);
      }

      if (typeof specificDomProps == 'function') {
        specificDomProps = specificDomProps(props);
      }

      return Object.assign({}, domProps, specificDomProps);
    }
  }, {
    key: "renderEditor",
    value: function renderEditor() {
      var props = this.getProps();

      var editorProps = _objectSpread(_objectSpread({
        nativeScroll: props.nativeScroll
      }, props.editorProps), {}, {
        editorProps: props.editorProps,
        cell: this,
        cellProps: props,
        value: props.editValue,
        theme: props.theme,
        rtl: props.rtl,
        autoFocus: true,
        onChange: this.onEditValueChange,
        onComplete: this.onEditorComplete,
        onCancel: this.onEditorCancel,
        onEnterNavigation: this.onEditorEnterNavigation,
        onTabNavigation: this.onEditorTabNavigation,
        gotoNext: this.gotoNextEditor,
        gotoPrev: this.gotoPrevEditor,
        key: 'editor',
        onClick: this.onEditorClick
      });

      var Editor = props.editor;

      if (Editor) {
        return _react.default.createElement(Editor, _objectSpread({}, editorProps));
      }

      if (props.renderEditor) {
        return props.renderEditor(editorProps, editorProps.cellProps, this);
      }

      return _react.default.createElement(_Text.default, _objectSpread({}, editorProps));
    }
  }, {
    key: "isInEdit",
    value: function isInEdit() {
      return this.getProps().inEdit;
    }
  }, {
    key: "getEditable",
    value: function getEditable(editValue) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getProps();

      if (props.groupSpacerColumn || props.groupProps) {
        return Promise.resolve(false);
      }

      var editable = props.computedEditable;

      if (typeof editable === 'function') {
        return Promise.resolve(editable(editValue, props));
      }

      return Promise.resolve(editable);
    }
  }, {
    key: "onEditorTabLeave",
    value: function onEditorTabLeave(direction) {}
  }, {
    key: "gotoNextEditor",
    value: function gotoNextEditor() {
      this.props.tryRowCellEdit(this.getProps().computedVisibleIndex + 1, +1);
    }
  }, {
    key: "gotoPrevEditor",
    value: function gotoPrevEditor() {
      this.props.tryRowCellEdit(this.getProps().computedVisibleIndex - 1, -1);
    }
  }, {
    key: "onEditorEnterNavigation",
    value: function onEditorEnterNavigation(complete, dir) {
      var props = this.getProps();

      if (typeof dir !== 'number') {
        dir = 0;
      }

      var newIndex = props.rowIndex + dir;

      if (!complete) {
        this.stopEdit();

        if (newIndex != props.rowIndex) {
          this.props.tryNextRowEdit(dir, props.columnIndex, true);
        }
      } else {
        this.onEditorComplete();

        if (newIndex != props.rowIndex) {
          this.props.tryNextRowEdit(dir, props.columnIndex, true);
        }
      }
    }
  }, {
    key: "onEditorTabNavigation",
    value: function onEditorTabNavigation(complete, dir) {
      var props = this.getProps();

      if (typeof dir !== 'number') {
        dir = 0;
      }

      var newIndex = props.computedVisibleIndex + dir;

      if (!complete) {
        this.stopEdit();

        if (newIndex != props.computedVisibleIndex) {
          this.props.tryRowCellEdit(newIndex, dir);
        }
      } else {
        this.onEditorComplete();

        if (newIndex != props.computedVisibleIndex) {
          this.props.tryRowCellEdit(newIndex, dir);
        }
      }
    }
  }, {
    key: "onEditorClick",
    value: function onEditorClick(event) {
      event.stopPropagation();
    }
  }, {
    key: "onEditorCancel",
    value: function onEditorCancel() {
      this.cancelEdit();
    }
  }, {
    key: "startEdit",
    value: function startEdit(editValue, errBack) {
      var _this3 = this;

      var props = this.getProps();
      this.isCancelled = false;
      var editValuePromise = editValue === undefined ? this.getEditStartValue(props) : Promise.resolve(editValue);
      return editValuePromise.then(function (editValue) {
        return _this3.getEditable(editValue, props).then(function (editable) {
          if (!editable) {
            return Promise.reject(editable);
          }

          if (props.onEditStart) {
            props.onEditStart(editValue, props);
          }

          if (props.onEditStartForRow) {
            props.onEditStartForRow(editValue, props);
          }

          return editValue;
        });
      }).catch(errBack || function (err) {});
    }
  }, {
    key: "stopEdit",
    value: function stopEdit() {
      var editValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getCurrentEditValue();
      var props = this.getProps();

      if (this.props.onEditStop) {
        this.props.onEditStop(editValue, props);
      }

      if (this.props.onEditStopForRow) {
        this.props.onEditStopForRow(editValue, props);
      }
    }
  }, {
    key: "cancelEdit",
    value: function cancelEdit() {
      this.isCancelled = true;
      this.stopEdit();
      var props = this.getProps();

      if (this.props.onEditCancel) {
        this.props.onEditCancel(props);
      }

      if (this.props.onEditCancelForRow) {
        this.props.onEditCancelForRow(props);
      }
    }
  }, {
    key: "onEditorComplete",
    value: function onEditorComplete() {
      var now = Date.now();

      if (this.lastEditCompleteTimestamp && now - this.lastEditCompleteTimestamp < 50) {
        return;
      }

      this.lastEditCompleteTimestamp = now;

      if (!this.isCancelled) {
        this.completeEdit();
      }

      this.isCancelled = false;
    }
  }, {
    key: "completeEdit",
    value: function completeEdit() {
      var completeValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getEditCompleteValue();
      var props = this.getProps();
      this.stopEdit();

      if (this.props.onEditComplete) {
        this.props.onEditComplete(completeValue, props);
      }

      if (this.props.onEditCompleteForRow) {
        this.props.onEditCompleteForRow(completeValue, props);
      }
    }
  }, {
    key: "getCurrentEditValue",
    value: function getCurrentEditValue() {
      return this.getProps().editValue;
    }
  }, {
    key: "getEditCompleteValue",
    value: function getEditCompleteValue() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getCurrentEditValue();

      if (this.props.getEditCompleteValue) {
        return this.props.getEditCompleteValue(value, this.getProps());
      }

      return value;
    }
  }, {
    key: "onFilterValueChange",
    value: function onFilterValueChange(filterValue) {
      var props = this.getProps();

      if (props.onFilterValueChange) {
        props.onFilterValueChange(filterValue, props);
      }
    }
  }, {
    key: "onEditValueChange",
    value: function onEditValueChange(e) {
      var value = e && e.target ? e.target.value : e;
      var props = this.getProps();

      if (this.props.onEditValueChange) {
        this.props.onEditValueChange(value, props);
      }

      if (this.props.onEditValueChangeForRow) {
        this.props.onEditValueChangeForRow(value, props);
      }
    }
  }, {
    key: "renderSelectionBox",
    value: function renderSelectionBox() {
      var props = this.getProps();
      var inTransition = props.inTransition,
          inShowTransition = props.inShowTransition,
          cellSelected = props.cellSelected,
          cellActive = props.cellActive;

      if (!cellSelected && !cellActive) {
        return null;
      }

      var style = {};

      if (inTransition) {
        var duration = inShowTransition ? props.showTransitionDuration : props.hideTransitionDuration;
        duration = duration || props.visibilityTransitionDuration;
        style.transitionDuration = typeof duration == 'number' ? "".concat(duration, "ms") : duration;
      }

      return _react.default.createElement("div", {
        key: "selectionBox",
        style: style,
        className: "InovuaReactDataGrid__cell__selection"
      }, this.props.lastInRange && this.props.computedCellMultiSelectionEnabled && _react.default.createElement("div", {
        className: "InovuaReactDataGrid__cell__selection-dragger InovuaReactDataGrid__cell__selection-dragger--direction-".concat(this.props.rtl ? 'rtl' : 'ltr'),
        onMouseDown: this.onCellSelectionDraggerMouseDown
      }));
    }
  }, {
    key: "onHeaderCellFocus",
    value: function onHeaderCellFocus(event) {
      var props = this.getProps();

      if (props.onFocus) {
        props.onFocus(event, props);
      }

      var initialProps = this.getInitialDOMProps();

      if (initialProps.onFocus) {
        initialProps.onFocus(event, props);
      }
    }
  }, {
    key: "onCellEnter",
    value: function onCellEnter(event) {
      var props = this.getProps();
      var initialProps = this.getInitialDOMProps();

      if (props.onCellEnter) {
        props.onCellEnter(event, props);
      }

      if (props.computedEnableColumnHover) {
        this.onColumnHoverMouseEnter(props);
      }

      if (initialProps.onMouseEnter) {
        initialProps.onMouseEnter(event, props);
      }
    }
  }, {
    key: "onCellLeave",
    value: function onCellLeave(event) {
      var props = this.getProps();
      var initialProps = this.getInitialDOMProps();

      if (props.onCellLeave) {
        props.onCellLeave(event, props);
      }

      if (props.computedEnableColumnHover) {
        this.onColumnHoverMouseLeave(props);
      }

      if (initialProps.onMouseLeave) {
        initialProps.onMouseLeave(event, props);
      }
    }
  }, {
    key: "onCellSelectionDraggerMouseDown",
    value: function onCellSelectionDraggerMouseDown(event) {
      event.preventDefault();
      event.stopPropagation();

      if (this.props.onCellSelectionDraggerMouseDown) {
        this.props.onCellSelectionDraggerMouseDown(event, this.getProps());
      }
    }
  }, {
    key: "prepareHeaderCellProps",
    value: function prepareHeaderCellProps(cellProps) {
      var props = this.getProps();
      var children = cellProps.children,
          computedSortInfo = cellProps.computedSortInfo;
      var computedSortable = props.computedSortable;
      var sortTools = computedSortable ? this.getSortTools(computedSortInfo ? computedSortInfo.dir : null, cellProps) : null;

      if (sortTools) {
        cellProps.children = [children && children.props ? (0, _react.cloneElement)(children, {
          key: 'content'
        }) : children, sortTools];

        if (props.headerAlign === 'end' || !props.headerAlign && props.textAlign == 'end') {
          cellProps.children.reverse();
        }
      }

      if (cellProps.renderHeader) {
        if (!Array.isArray(cellProps.children)) {
          cellProps.children = [cellProps.children];
        }

        cellProps.children = cellProps.renderHeader(cellProps);
      }

      if (computedSortInfo && computedSortInfo.dir) {
        var dirName = computedSortInfo.dir === 1 ? 'asc' : 'desc';
        cellProps.className = (0, _join.default)(cellProps.className, "".concat(props.headerCellDefaultClassName, "--sort-").concat(dirName));
      }

      cellProps.onResizeMouseDown = this.onResizeMouseDown.bind(this, cellProps);
      cellProps.onResizeTouchStart = this.onResizeTouchStart.bind(this, cellProps);
      return cellProps;
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(event) {
      var props = this.getProps();
      var initialDOMProps = this.getInitialDOMProps();

      if (event.button === 2) {
        return;
      }

      if (props.onMouseDown) {
        props.onMouseDown(props, event);
      }

      if (initialDOMProps.onMouseDown) {
        initialDOMProps.onMouseDown(event, props);
      }

      if (props.onCellMouseDown) {
        props.onCellMouseDown(event, props);
      }

      if (props.onDragRowMouseDown && props.id === _defaultRowReorderColumnId.id) {
        props.onDragRowMouseDown(event, props.rowIndex, this.domRef);
      }
    }
  }, {
    key: "onContextMenu",
    value: function onContextMenu(event) {
      var props = this.getProps();
      var initialDOMProps = this.getInitialDOMProps();

      if (event.nativeEvent) {
        event.nativeEvent.__cellProps = props;
      }

      if (props.onContextMenu) {
        props.onContextMenu(event, props);
      }

      if (initialDOMProps.onContextMenu) {
        initialDOMProps.onContextMenu(event, props);
      }
    }
  }, {
    key: "onTouchStart",
    value: function onTouchStart(event) {
      var props = this.getProps();
      var initialDOMProps = this.getInitialDOMProps();

      if (props.onTouchStart) {
        props.onTouchStart(props, event);
      }

      if (initialDOMProps.onTouchStart) {
        initialDOMProps.onTouchStart(event, props);
      }

      if (props.onCellTouchStart) {
        props.onCellTouchStart(event, props);
      }

      if (props.onDragRowMouseDown && props.id === _defaultRowReorderColumnId.id) {
        props.onDragRowMouseDown(event, props.rowIndex, this.domRef);
      }

      event.stopPropagation();
    }
  }, {
    key: "onResizeMouseDown",
    value: function onResizeMouseDown(cellProps, event) {
      var props = this.getProps();
      this.hideFilterContextMenu();

      if (props.hideColumnContextMenu) {
        props.hideColumnContextMenu();
      }

      if (props.onResizeMouseDown) {
        var node = this.getDOMNode();
        props.onResizeMouseDown(cellProps, {
          colHeaderNode: node,
          event: event
        });
      }
    }
  }, {
    key: "onResizeTouchStart",
    value: function onResizeTouchStart(cellProps, event) {
      var props = this.getProps();

      if (props.onResizeTouchStart) {
        props.onResizeTouchStart(cellProps, {
          colHeaderNode: this.getDOMNode(),
          event: event
        });
      }
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.domRef.current;
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      var _this4 = this;

      var props = this.getProps();
      var initialDOMProps = this.getInitialDOMProps();

      if (props.onClick) {
        props.onClick(event, props);
      }

      if (initialDOMProps.onClick) {
        initialDOMProps.onClick(event, props);
      }

      if (!this.props.headerCell && props.onCellClick) {
        props.onCellClick(event, props);
      }

      if (!this.props.headerCell) {
        if (props.computedEditable && !props.inEdit && (props.editStartEvent === 'onClick' || props.editStartEvent === 'click')) {
          this.startEdit();
        }

        return;
      }

      if (this.props.preventSortOnClick) {
        if (this.props.preventSortOnClick(event, props) === true) {
          return;
        }
      }

      if (!props.sortDelay || props.sortDelay < 1) {
        return this.onSortClick();
      }

      if (this.sortTimeoutId) {
        clearTimeout(this.sortTimeoutId);
        this.sortTimeoutId = null;
      }

      this.sortTimeoutId = setTimeout(function () {
        _this4.onSortClick();

        _this4.sortTimeoutId = null;
      }, parseInt(props.sortDelay, 10));
      return undefined;
    }
  }, {
    key: "onDoubleClick",
    value: function onDoubleClick(event) {
      var props = this.getProps();
      var initialDOMProps = this.getInitialDOMProps();

      if (props.onDoubleClick) {
        props.onDoubleClick(event, props);
      }

      if (initialDOMProps.onDoubleClick) {
        initialDOMProps.onDoubleClick(event, props);
      }

      var headerProps = props.headerProps,
          headerCell = props.headerCell;

      if (!headerCell) {
        if (props.computedEditable && !props.inEdit && (props.editStartEvent === 'onDoubleClick' || props.editStartEvent === 'dblclick' || props.editStartEvent === 'doubleclick')) {
          this.startEdit();
        }

        return;
      }

      if (headerProps && headerProps.onDoubleClick) {
        headerProps.onDoubleClick(event, props);
      }

      if (this.sortTimeoutId) {
        clearTimeout(this.sortTimeoutId);
        this.sortTimeoutId = null;
      }
    }
  }, {
    key: "getEditStartValue",
    value: function getEditStartValue() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getProps();

      if (typeof props.getEditStartValue == 'function') {
        return Promise.resolve(props.getEditStartValue(props.value, props));
      }

      return Promise.resolve(props.value);
    }
  }, {
    key: "onSortClick",
    value: function onSortClick() {
      var props = this.getProps();

      if (props.headerCell && props.computedSortable) {
        if (props.onSortClick) {
          props.onSortClick(props);
        }
      }
    }
  }, {
    key: "getSortTools",
    value: function getSortTools() {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var cellProps = arguments.length > 1 ? arguments[1] : undefined;

      var _this$getProps = this.getProps(),
          computedSortable = _this$getProps.computedSortable,
          render = _this$getProps.renderSortTool;

      return (0, _renderSortTool.default)({
        sortable: computedSortable,
        direction: direction,
        renderSortTool: render
      }, cellProps);
    }
  }, {
    key: "showFilterContextMenu",
    value: function showFilterContextMenu(node) {
      if (this.props.showColumnFilterContextMenu) {
        this.props.showColumnFilterContextMenu(node, this.getProps());
      }
    }
  }, {
    key: "hideFilterContextMenu",
    value: function hideFilterContextMenu() {
      if (this.props.hideColumnFilterContextMenu) {
        this.props.hideColumnFilterContextMenu();
      }
    }
  }, {
    key: "showContextMenu",
    value: function showContextMenu(domRef, onHide) {
      if (this.props.showColumnContextMenu) {
        this.props.showColumnContextMenu(domRef ? domRef : null, this.getProps(), this, onHide);
      }
    }
  }, {
    key: "getProxyRegion",
    value: function getProxyRegion() {
      var node = this.getDOMNode();

      var _this$getProps2 = this.getProps(),
          computedResizable = _this$getProps2.computedResizable,
          computedFilterable = _this$getProps2.computedFilterable;

      return computedFilterable ? _region.default.from(node.firstChild) : _region.default.from(computedResizable ? node.firstChild : node);
    }
  }, {
    key: "renderGroupTool",
    value: function renderGroupTool() {
      var props = this.getProps();
      var rtl = props.rtl,
          collapsed = props.collapsed,
          groupProps = props.groupProps,
          renderGroupCollapseTool = props.renderGroupCollapseTool,
          renderGroupExpandTool = props.renderGroupExpandTool;
      return (0, _renderGroupTool2.default)({
        render: groupProps.renderGroupTool,
        collapsed: collapsed,
        rtl: rtl,
        size: 20,
        toggleGroup: this.toggleGroup,
        renderGroupCollapseTool: renderGroupCollapseTool,
        renderGroupExpandTool: renderGroupExpandTool
      });
    }
  }]);
  return InovuaDataGridCell;
}(_react.default.Component);

exports.default = InovuaDataGridCell;
InovuaDataGridCell.defaultProps = {
  cellDefaultClassName: cellBem(),
  headerCellDefaultClassName: headerBem(),
  computedMinWidth: 40,
  groupNestingSize: 10,
  treeNestingSize: 10,
  checkboxTabIndex: null,
  onSortClick: emptyFn,
  preventSortOnClick: function preventSortOnClick(event) {
    var target = event.target;
    return (0, _isFocusable.default)(target);
  }
};
InovuaDataGridCell.propTypes = {
  computedAbsoluteIndex: _propTypes.default.number,
  checkboxTabIndex: _propTypes.default.number,
  cellActive: _propTypes.default.bool,
  cellClassName: _propTypes.default.string,
  cellDefaultClassName: _propTypes.default.string,
  cellDOMProps: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
  computedCellMultiSelectionEnabled: _propTypes.default.bool,
  cellSelectable: _propTypes.default.bool,
  cellSelected: _propTypes.default.bool,
  checkboxColumn: _propTypes.default.any,
  collapsed: _propTypes.default.bool,
  computedColspan: _propTypes.default.number,
  computedRowspan: _propTypes.default.number,
  columnIndex: _propTypes.default.number,
  columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  computedLocked: _propTypes.default.oneOf([false, 'start', 'end']),
  computedWidth: _propTypes.default.number,
  data: _propTypes.default.oneOfType([_propTypes.default.shape({}), _propTypes.default.array]),
  defaultWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  depth: _propTypes.default.number,
  deselectAll: _propTypes.default.func,
  domProps: _propTypes.default.object,
  empty: _propTypes.default.bool,
  first: _propTypes.default.bool,
  firstInSection: _propTypes.default.bool,
  computedFlex: _propTypes.default.number,
  flex: _propTypes.default.number,
  group: _propTypes.default.string,
  computedGroupBy: _propTypes.default.any,
  groupCell: _propTypes.default.bool,
  groupSpacerColumn: _propTypes.default.bool,
  groupNestingSize: _propTypes.default.number,
  groupProps: _propTypes.default.object,
  hasBottomSelectedSibling: _propTypes.default.bool,
  hasLeftSelectedSibling: _propTypes.default.bool,
  hasLockedStart: _propTypes.default.bool,
  hasRightSelectedSibling: _propTypes.default.bool,
  hasTopSelectedSibling: _propTypes.default.bool,
  header: _propTypes.default.any,
  headerAlign: _propTypes.default.oneOf(['start', 'center', 'end']),
  headerCell: _propTypes.default.bool,
  headerCellDefaultClassName: _propTypes.default.string,
  headerClassName: _propTypes.default.string,
  headerDOMProps: _propTypes.default.object,
  headerEllipsis: _propTypes.default.bool,
  headerHeight: _propTypes.default.number,
  headerProps: _propTypes.default.any,
  headerUserSelect: _propTypes.default.oneOf([true, false, 'text', 'none']),
  headerVerticalAlign: _propTypes.default.oneOf(['top', 'middle', 'center', 'bottom', 'start', 'end']),
  headerWrapperClassName: _propTypes.default.string,
  hidden: _propTypes.default.bool,
  hideIntermediateState: _propTypes.default.bool,
  hideTransitionDuration: _propTypes.default.number,
  hiding: _propTypes.default.bool,
  id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  inHideTransition: _propTypes.default.bool,
  inShowTransition: _propTypes.default.bool,
  inTransition: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  index: _propTypes.default.number,
  initialIndex: _propTypes.default.number,
  isColumn: _propTypes.default.bool,
  last: _propTypes.default.bool,
  lastInRange: _propTypes.default.bool,
  lastInSection: _propTypes.default.bool,
  lastRowInGroup: _propTypes.default.bool,
  lastUnlocked: _propTypes.default.bool,
  locked: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  computedMaxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  computedMinWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minRowHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  multiSelect: _propTypes.default.bool,
  name: _propTypes.default.string,
  nativeScroll: _propTypes.default.bool,
  nextBorderLeft: _propTypes.default.bool,
  noBackground: _propTypes.default.bool,
  onCellClick: _propTypes.default.func,
  onCellEnter: _propTypes.default.func,
  onCellMouseDown: _propTypes.default.func,
  preventSortOnClick: _propTypes.default.func,
  onCellSelectionDraggerMouseDown: _propTypes.default.func,
  onGroupToggle: _propTypes.default.func,
  onMount: _propTypes.default.func,
  onRender: _propTypes.default.func,
  onResizeMouseDown: _propTypes.default.func,
  onResizeTouchStart: _propTypes.default.func,
  onSortClick: _propTypes.default.func,
  onUnmount: _propTypes.default.func,
  prevBorderRight: _propTypes.default.bool,
  render: _propTypes.default.func,
  renderCheckbox: _propTypes.default.func,
  renderGroupTitle: _propTypes.default.func,
  renderHeader: _propTypes.default.func,
  renderSortTool: _propTypes.default.func,
  computedResizable: _propTypes.default.bool,
  lockable: _propTypes.default.bool,
  resizeProxyStyle: _propTypes.default.object,
  rowActive: _propTypes.default.bool,
  rowHeight: _propTypes.default.number,
  initialRowHeight: _propTypes.default.number,
  rowIndex: _propTypes.default.number,
  rowIndexInGroup: _propTypes.default.number,
  rowRenderIndex: _propTypes.default.number,
  rowSelected: _propTypes.default.bool,
  scrollbarWidth: _propTypes.default.number,
  indexInHeaderGroup: _propTypes.default.number,
  parentGroups: _propTypes.default.array,
  selectAll: _propTypes.default.func,
  selectedCount: _propTypes.default.number,
  selection: _propTypes.default.any,
  setRowSelected: _propTypes.default.func,
  setRowExpanded: _propTypes.default.func,
  toggleRowExpand: _propTypes.default.func,
  toggleNodeExpand: _propTypes.default.func,
  shouldComponentUpdate: _propTypes.default.func,
  showBorderBottom: _propTypes.default.bool,
  showBorderLeft: _propTypes.default.bool,
  showBorderRight: _propTypes.default.any,
  showBorderTop: _propTypes.default.bool,
  showColumnContextMenu: _propTypes.default.func,
  showColumnMenuSortOptions: _propTypes.default.bool,
  showColumnMenuFilterOptions: _propTypes.default.bool,
  showColumnMenuLockOptions: _propTypes.default.bool,
  showColumnMenuGroupOptions: _propTypes.default.bool,
  showTransitionDuration: _propTypes.default.number,
  sort: _propTypes.default.any,
  sortDelay: _propTypes.default.number,
  computedSortInfo: _propTypes.default.any,
  computedSortable: _propTypes.default.bool,
  textAlign: _propTypes.default.oneOf(['start', 'center', 'end']),
  textEllipsis: _propTypes.default.bool,
  textVerticalAlign: _propTypes.default.oneOf(['top', 'middle', 'center', 'bottom', 'start', 'end']),
  titleClassName: _propTypes.default.string,
  tryRowCellEdit: _propTypes.default.func,
  totalCount: _propTypes.default.number,
  totalDataCount: _propTypes.default.number,
  unselectedCount: _propTypes.default.number,
  userSelect: _propTypes.default.oneOf([true, false, 'text', 'none']),
  value: _propTypes.default.any,
  virtualizeColumns: _propTypes.default.bool,
  visibilityTransitionDuration: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  computedVisible: _propTypes.default.bool,
  computedVisibleCount: _propTypes.default.number,
  computedVisibleIndex: _propTypes.default.number,
  indexInColumns: _propTypes.default.number,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  editable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  onEditStop: _propTypes.default.func,
  onEditStart: _propTypes.default.func,
  onEditCancel: _propTypes.default.func,
  onEditValueChange: _propTypes.default.func,
  onEditComplete: _propTypes.default.func,
  onEditStopForRow: _propTypes.default.func,
  onEditStartForRow: _propTypes.default.func,
  onEditCancelForRow: _propTypes.default.func,
  onEditValueChangeForRow: _propTypes.default.func,
  onEditCompleteForRow: _propTypes.default.func,
  onDragRowMouseDown: _propTypes.default.func,
  isRowExpandable: _propTypes.default.func,
  editorProps: _propTypes.default.any,
  editValue: _propTypes.default.any,
  Editor: _propTypes.default.func,
  renderEditor: _propTypes.default.func,
  zIndex: _propTypes.default.number,
  computedOffset: _propTypes.default.number,
  groupTitleCell: _propTypes.default.bool,
  groupExpandCell: _propTypes.default.bool,
  rendersInlineEditor: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  groupColumn: _propTypes.default.bool,
  treeColumn: _propTypes.default.bool,
  renderNodeTool: _propTypes.default.func,
  showInContextMenu: _propTypes.default.bool,
  naturalRowHeight: _propTypes.default.bool,
  rtl: _propTypes.default.bool,
  computedFilterable: _propTypes.default.bool,
  computedEditable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  groupColumnVisible: _propTypes.default.bool,
  filterTypes: _propTypes.default.any,
  filterDelay: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  getFilterValue: _propTypes.default.func,
  onFilterValueChange: _propTypes.default.func,
  getEditStartValue: _propTypes.default.func,
  getEditCompleteValue: _propTypes.default.func,
  editStartEvent: _propTypes.default.string,
  setActiveIndex: _propTypes.default.func,
  renderColumnReorderProxy: _propTypes.default.func,
  columnHoverClassName: _propTypes.default.string,
  renderRowDetailsExpandIcon: _propTypes.default.func,
  renderRowDetailsCollapsedIcon: _propTypes.default.func
};