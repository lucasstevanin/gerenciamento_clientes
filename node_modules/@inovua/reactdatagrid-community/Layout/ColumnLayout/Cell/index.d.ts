/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { CellProps } from './CellProps';
export default class InovuaDataGridCell extends React.Component {
    domRef: React.RefObject<unknown>;
    isCancelled: boolean;
    constructor(props: any);
    UNSAFE_componentWillReceiveProps(nextProps: any): void;
    componentDidMount(): void;
    getProps(): any;
    setStateProps(stateProps: any): void;
    updateProps(props: any, callback?: any): void;
    onUpdate(): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    prepareStyle(props: any): {};
    prepareClassName(props: any): string;
    setDragging(dragging: any, callback: any): void;
    updateState(state: any, callback: any): void;
    setLeft(left: any): void;
    setRight(right: any): void;
    setTop(top: any): void;
    setHeight(height: any): void;
    setWidth(width: any): void;
    getInitialIndex(): any;
    getcomputedVisibleIndex(): any;
    render(): React.ReactNode;
    renderNodeTool(props: any): React.FunctionComponentElement<{
        key: string;
    }> | undefined;
    getInitialDOMProps(): any;
    renderEditor(): any;
    isInEdit(): any;
    getEditable(editValue: any, props?: any): Promise<any>;
    onEditorTabLeave(direction: any): void;
    gotoNextEditor(): void;
    gotoPrevEditor(): void;
    onEditorEnterNavigation(complete: boolean, dir: number): void;
    onEditorTabNavigation(complete: any, dir: any): void;
    onEditorClick(event: any): void;
    onEditorCancel(): void;
    startEdit(editValue: any, errBack?: (...args: any[]) => any): Promise<any>;
    stopEdit(editValue?: any): void;
    cancelEdit(): void;
    onEditorComplete(): void;
    completeEdit(completeValue?: any): void;
    getCurrentEditValue(): any;
    getEditCompleteValue(value?: any): any;
    onFilterValueChange(filterValue: any): void;
    onEditValueChange(e: any): void;
    renderSelectionBox(): JSX.Element | null;
    onHeaderCellFocus(event: any): void;
    onColumnHoverMouseEnter: (props: CellProps) => void;
    onColumnHoverMouseLeave: (props: CellProps) => void;
    onCellEnter(event: MouseEvent): void;
    onCellLeave(event: MouseEvent): void;
    onCellSelectionDraggerMouseDown(event: any): void;
    prepareHeaderCellProps(cellProps: any): any;
    onMouseDown(event: any): void;
    onContextMenu(event: any): void;
    onTouchStart(event: any): void;
    onResizeMouseDown(cellProps: any, event: any): void;
    onResizeTouchStart(cellProps: any, event: any): void;
    getDOMNode(): unknown;
    onClick(event: any): void;
    onDoubleClick(event: any): void;
    getEditStartValue(props?: any): Promise<any>;
    onSortClick(): void;
    getSortTools(direction: null | undefined, cellProps: any): any;
    showFilterContextMenu(node: any): void;
    hideFilterContextMenu(): void;
    showContextMenu(domRef: any, onHide: any): void;
    getProxyRegion(): any;
    renderGroupTool(): any;
    toggleGroup: (event: any) => void;
}
